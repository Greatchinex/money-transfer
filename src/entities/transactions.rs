//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use super::sea_orm_active_enums::Status;
use super::sea_orm_active_enums::TrxType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transactions")]
pub struct Model {
    #[sea_orm(unique)]
    pub id: i32,
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub uuid: String,
    #[sea_orm(column_type = "Decimal(Some((18, 2)))")]
    pub amount: Decimal,
    pub trx_type: Option<TrxType>,
    pub status: Option<Status>,
    pub description: String,
    #[sea_orm(unique)]
    pub provider_reference: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((18, 2)))")]
    pub current_balance: Decimal,
    #[sea_orm(column_type = "Decimal(Some((18, 2)))")]
    pub previous_balance: Decimal,
    pub user_id: String,
    pub wallet_id: String,
    pub provider: String,
    #[sea_orm(column_type = "Decimal(Some((18, 2)))")]
    pub fees: Decimal,
    #[sea_orm(column_type = "Decimal(Some((18, 2)))")]
    pub provider_fees: Decimal,
    pub category: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub meta: Option<String>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub deleted_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Uuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(
        belongs_to = "super::wallets::Entity",
        from = "Column::UserId",
        to = "super::wallets::Column::Uuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Wallets,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::wallets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
