//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(unique)]
    pub id: i32,
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub uuid: String,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub withdrawal_pin: Option<String>,
    pub is_verified: i8,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub deleted_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::wallets::Entity")]
    Wallets,
}

impl Related<super::wallets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallets.def()
    }
}

// Response to client on api call. Without password and user pin
#[derive(Serialize, Debug)]
pub struct UserResponse {
    pub id: i32,
    pub uuid: String,
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub is_verified: i8,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub deleted_at: Option<DateTimeUtc>,
}

impl Model {
    pub fn filter_response(&self) -> UserResponse {
        UserResponse {
            id: self.id,
            uuid: self.uuid.clone(),
            first_name: self.first_name.clone(),
            last_name: self.last_name.clone(),
            email: self.email.clone(),
            is_verified: self.is_verified,
            created_at: self.created_at,
            updated_at: self.updated_at,
            deleted_at: self.deleted_at,
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
